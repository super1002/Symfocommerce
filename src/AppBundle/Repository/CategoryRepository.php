<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NonUniqueResultException;
use Doctrine\ORM\QueryBuilder;
use AppBundle\Entity\Category;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends EntityRepository
{
    /**
     * @param bool $showEmpty
     * @param string $order
     * @param string $sort
     * @return Category[]|array
     */
    public function getAllCategories(bool $showEmpty = true, string $sort = 'name', string $order = 'ASC'): array
    {
        $qb = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('c')
            ->from(Category::class, 'c');

        if (!$showEmpty) {
            $qb->innerJoin('c.products', 'p')
                ->andWhere('p.quantity <> 0');
        }

        $qb->orderBy('c.' . $sort, $order);

        return $qb->getQuery()->getResult();
    }

    /**
     * query for admin paginator
     *
     * @return QueryBuilder
     */
    public function getAllCategoriesAdminQB(): QueryBuilder
    {
        $qb = $this->getEntityManager()
            ->createQueryBuilder()
            ->select('c')
            ->from(Category::class, 'c');

        return $qb;
    }

    /**
     * @param $slug string
     * @return Category|null
     * @throws NonUniqueResultException
     */
    public function findBySlug(string $slug): ?Category
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('c')
            ->from(Category::class, 'c')
            ->where('c.slug = :slug')
            ->setParameter('slug', $slug)
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @return Category|null
     * @throws NonUniqueResultException
     */
    public function getFirstCategory(): ?Category
    {
        return $this->getEntityManager()
            ->createQueryBuilder()
            ->select('ca')
            ->from(Category::class, 'ca')
            ->orderBy('ca.id', 'ASC')
            ->setMaxResults(1)
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @return array
     */
    public function getArrayForSitemap(): array
    {
        return $this->createQueryBuilder('c')
            ->select('c.slug, c.dateUpdated')
            ->getQuery()
            ->getArrayResult();
    }
}
